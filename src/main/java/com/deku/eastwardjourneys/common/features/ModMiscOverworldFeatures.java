package com.deku.eastwardjourneys.common.features;

import com.deku.eastwardjourneys.common.blocks.ModBlocks;
import net.minecraft.core.registries.Registries;
import net.minecraft.data.worldgen.BootstapContext;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.util.valueproviders.UniformInt;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;

import static com.deku.eastwardjourneys.Main.MOD_ID;

public class ModMiscOverworldFeatures {
    public static ResourceKey<ConfiguredFeature<?, ?>> MAPLE_LEAF_GROUND_COVER = registerOverworldFeatureKey("maple_leaf_ground_cover");
    public static ResourceKey<ConfiguredFeature<?, ?>> MOSS_LAYER = registerOverworldFeatureKey("moss_layer");

    public static ResourceKey<ConfiguredFeature<?, ?>> HOTSPRING = registerOverworldFeatureKey("hotspring");

    public static ResourceKey<ConfiguredFeature<?, ?>> KARST_STONE = registerOverworldFeatureKey("karst_stone");

    public static ResourceKey<ConfiguredFeature<?, ?>> FALLEN_TREE_HINOKI = registerOverworldFeatureKey("fallen_tree_hinoki");

    /**
     * Registers a resource key for the given miscellanous overworld feature name
     *
     * @param featureName Name of the feature we want to create a resource key for
     * @return The resource key created for the given feature
     */
    public static ResourceKey<ConfiguredFeature<?, ?>> registerOverworldFeatureKey(String featureName) {
        return ResourceKey.create(Registries.CONFIGURED_FEATURE, new ResourceLocation(MOD_ID, featureName));
    }

    /**
     * Creates a feature configuration for the hotspring
     *
     * @param fluid The fluid we want to use in the hotspring
     * @param barrier The block that will act as the barrier for the hotspring
     * @return Feature configuration storing information used in the placement of hotspring features
     */
    private static HotspringFeature.Configuration createHotspringConfiguration(BlockState fluid, BlockState barrier) {
        return new HotspringFeature.Configuration(
                BlockStateProvider.simple(fluid),
                BlockStateProvider.simple(barrier)
        );
    }

    private static KarstStoneFeature.Configuration createKarstStoneConfiguration(BlockState stone) {
        return new KarstStoneFeature.Configuration(BlockStateProvider.simple(stone), UniformInt.of(1, 2), UniformInt.of(8, 25));
    }

    private static FallenTreeFeature.Configuration createFallenTreeConfiguration(BlockState log, int minLength, int maxLength) {
        return new FallenTreeFeature.Configuration(BlockStateProvider.simple(log), UniformInt.of(minLength, maxLength));
    }

    /**
     * Registers miscellaneous overworld features using the bootstrap context
     *
     * @param context The bootstrap context
     */
    public static void bootstrap(BootstapContext<ConfiguredFeature<?, ?>> context) {
        context.register(MAPLE_LEAF_GROUND_COVER, new ConfiguredFeature<>(ModFeatures.MAPLE_GROUND_COVER, FeatureConfiguration.NONE));
        context.register(MOSS_LAYER, new ConfiguredFeature<>(ModFeatures.MOSS_LAYER, FeatureConfiguration.NONE));

        // TODO: Any way I can stop the water from freezing over? Magma blocks under work but when I start using less of those there could be more ice...
        //  Probably not worth all the effort... May be better to just go with a basic lake as I have here
        //  Vanilla water lakes are generated by terrain gen, not by features like lava lakes are!
        context.register(HOTSPRING, new ConfiguredFeature<>(ModFeatures.HOTSPRING, createHotspringConfiguration(Blocks.WATER.defaultBlockState(), Blocks.STONE.defaultBlockState())));

        context.register(KARST_STONE, new ConfiguredFeature<>(ModFeatures.KARST_STONE, createKarstStoneConfiguration(Blocks.STONE.defaultBlockState())));
        context.register(FALLEN_TREE_HINOKI, new ConfiguredFeature<>(ModFeatures.FALLEN_TREE, createFallenTreeConfiguration(ModBlocks.HINOKI_LOG.defaultBlockState(), 6, 16)));
    }
}
